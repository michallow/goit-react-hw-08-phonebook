{"version":3,"file":"static/js/747.cc719e6c.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","redux/selectors.js","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/EditContacts/EditContacts.module.css?a3ff","components/EditContacts/EditContacts.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formInput\":\"ContactForm_formInput__GszVU\",\"formBtn\":\"ContactForm_formBtn__qZGY3\"};","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/operations';\nimport { Notify } from 'notiflix';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\nimport { purple } from '@mui/material/colors';\nimport TextField from '@mui/material/TextField';\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const dispatch = useDispatch();\n  const { contacts } = useSelector(state => state.contacts);\n\n  const handleNameChange = e => {\n    const { value } = e.target;\n    setName(value);\n  };\n\n  const handleNumberChange = e => {\n    setPhone(e.target.value);\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const contactList = [...contacts];\n    if (\n      contactList.findIndex(\n        contact => name === contact.name\n      ) !== -1\n    ) {\n      Notify.warning('Contact already exists!', {\n        position: 'left-top',\n      });\n    } else {\n      dispatch(\n        addContact({\n          name,\n          number: phone,\n        })\n      );\n    }\n\n    setName('');\n    setPhone('');\n  };\n\n  const ColorButton = styled(Button)(({ theme }) => ({\n    color: theme.palette.getContrastText(purple[500]),\n    backgroundColor: '#673ab7',\n    '&:hover': {\n      backgroundColor: '#673ab7',\n      boxShadow: '2px 6px 6px rgba(0, 0, 0, 0.4)',\n    },\n  }));\n\n  return (\n    <form className={css.form} onSubmit={handleFormSubmit}>\n      <label className={css.formLabel}>Name </label>\n      <TextField\n        className={css.formInput}\n        type='text'\n        name='name'\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        placeholder='Enter name'\n        value={name}\n        onChange={handleNameChange}\n        id='filled-basic'\n        label=''\n        variant='filled'\n      />\n      <label className={css.formLabel}>Number </label>\n      <TextField\n        className={css.formInput}\n        type='tel'\n        name='number'\n        pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n        title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        required\n        placeholder='Enter phone number'\n        value={phone}\n        onChange={handleNumberChange}\n        id='filled-basic'\n        label=''\n        variant='filled'\n      />\n      <ColorButton\n        className={css.formBtn}\n        type='submit'\n        variant='contained'\n        size='large'>\n        Add Contact\n      </ColorButton>\n    </form>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"filterForm\":\"Filter_filterForm__+l+6Q\",\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","export const selectContacts = state => state.contacts;\n\nexport const selectFilters = state => state.filter;\n\nexport const selectIsLoading = state =>\n  state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;","import propTypes from 'prop-types';\nimport css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/slices/filterSlice';\nimport TextField from '@mui/material/TextField';\nimport { selectFilters } from '../../redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { value } = e.currentTarget;\n    dispatch(setFilter(value));\n  };\n\n  const { filter } = useSelector(selectFilters);\n\n  return (\n    <div className={css.filterForm}>\n      <label className={css.filterLabel}>\n        Find contacts by name\n      </label>\n      <TextField\n        className={css.filterInput}\n        type='text'\n        name='filter'\n        placeholder='Enter search'\n        value={filter}\n        onChange={handleChange}\n        id='filled-basic'\n        label=''\n        variant='filled'\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: propTypes.string,\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactListBtn\":\"ContactList_contactListBtn__iwQAv\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"EditContacts_modal__4KT0q\",\"modalForm\":\"EditContacts_modalForm__9cj2E\",\"editInput\":\"EditContacts_editInput__V19EM\"};","import propTypes from 'prop-types';\nimport css from '../EditContacts/EditContacts.module.css';\nimport { useState, useEffect } from 'react';\nimport { Paper } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\nimport { purple } from '@mui/material/colors';\n\nexport const EditContacts = ({\n  handleEdit,\n  id,\n  editContact,\n}) => {\n  const [editName, setEditName] = useState('');\n  const [editPhone, setEditPhone] = useState('');\n\n  useEffect(() => {\n    if (editContact) {\n      setEditName(editContact.name);\n      setEditPhone(editContact.number);\n    }\n  }, [editContact]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contact = {\n      name: editName,\n      number: editPhone,\n      id: id,\n    };\n    handleEdit(contact);\n  };\n\n  const ColorButton = styled(Button)(({ theme }) => ({\n    color: theme.palette.getContrastText(purple[500]),\n    backgroundColor: '#673ab7',\n    '&:hover': {\n      backgroundColor: '#673ab7',\n      boxShadow: '2px 6px 6px rgba(0, 0, 0, 0.4)',\n    },\n  }));\n\n  return (\n    <div>\n      <Paper elevation={5}>\n        <div className={css.modal}>\n          <form\n            className={css.modalForm}\n            onSubmit={handleSubmit}>\n            <label name='name'>\n              <TextField\n                className={css.editInput}\n                defaultValue={editContact.name}\n                onChange={e =>\n                  setEditName(e.currentTarget.value)\n                }\n                id='outlined-basic'\n                label=''\n                variant='outlined'\n                size='small'\n              />\n            </label>\n            <label name='phone'>\n              <TextField\n                className={css.editInput}\n                defaultValue={editContact.number}\n                onChange={e =>\n                  setEditPhone(e.currentTarget.value)\n                }\n                id='outlined-basic'\n                label=''\n                variant='outlined'\n                size='small'\n              />\n            </label>\n            <ColorButton\n              className={css.editBtn}\n              type='submit'\n              variant='contained'\n              size='small'>\n              Confirm\n            </ColorButton>\n          </form>\n        </div>\n      </Paper>\n    </div>\n  );\n};\n\nEditContacts.propTypes = {\n  contacts: propTypes.arrayOf(\n    propTypes.exact({\n      id: propTypes.string.isRequired,\n      name: propTypes.string.isRequired,\n      number: propTypes.string.isRequired,\n    })\n  ),\n  handleEdit: propTypes.func,\n  editContact: propTypes.object,\n};","import propTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport { EditContacts } from '../EditContacts/EditContacts';\n\nexport const ContactList = ({\n  contacts,\n  handleDelete,\n  handleEdit,\n  handleModalOpen,\n  closeModal,\n  isEditModalOpen,\n  editId,\n}) => {\n  const getEditContact = () => {\n    return contacts.find(contact => contact.id === editId);\n  };\n\n  return (\n    <div>\n      {' '}\n      <ul className={css.contactList}>\n        {' '}\n        {contacts &&\n          contacts.map((contact, id) => (\n            <li key={id} className={css.contactListItem}>\n              {contact.name}: {contact.number}\n              <button\n                className={css.contactListBtn}\n                type='button'\n                name='edit'\n                onClick={() => handleModalOpen(contact.id)}>\n                Edit\n              </button>\n              <button\n                type='button'\n                className={css.contactListBtn}\n                onClick={() => handleDelete(contact.id)}>\n                Delete\n              </button>\n            </li>\n          ))}\n      </ul>\n      {isEditModalOpen && (\n        <EditContacts\n          id={editId}\n          editContact={getEditContact()}\n          closeModal={closeModal}\n          handleEdit={handleEdit}\n        />\n      )}\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  contacts: propTypes.arrayOf(\n    propTypes.exact({\n      id: propTypes.string.isRequired,\n      name: propTypes.string.isRequired,\n      number: propTypes.string.isRequired,\n      editId: propTypes.string,\n    })\n  ),\n  handleDelete: propTypes.func,\n  handleEdit: propTypes.func,\n  handleModalOpen: propTypes.func,\n  closeModal: propTypes.func,\n  isEditModalOpen: propTypes.bool,\n};","import { useEffect, useState } from 'react';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport {\n  fetchContacts,\n  deleteContact,\n  editContact,\n} from '../redux/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilters,\n} from '../redux/selectors';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const { contacts } = useSelector(selectContacts);\n  const { filter } = useSelector(selectFilters);\n  const [isEditModalOpen, setIsEditModalOpen] =\n    useState(false);\n  const [editId, setEditId] = useState('');\n\n  // eslint-disable-next-line\n  useEffect(() => {\n    // eslint-disable-next-line\n    dispatch(fetchContacts());\n    // eslint-disable-next-line\n  }, []);\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const handleEdit = contact => {\n    dispatch(editContact(contact));\n    closeModal();\n  };\n\n  const handleModalOpen = e => {\n    setIsEditModalOpen(true);\n    setEditId(e);\n  };\n\n  const closeModal = () => {\n    setIsEditModalOpen(false);\n  };\n\n  const getFilteredContacts = () => {\n    const filteredContactList =\n      contacts &&\n      contacts.filter(contact => {\n        return contact.name\n          .toLowerCase()\n          .includes(filter.toLowerCase());\n      });\n    return filteredContactList;\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: '#333',\n        margin: 20,\n        borderRadius: 10,\n        paddingBottom: 30,\n      }}>\n      <h1>Create New Contact</h1>\n      <ContactForm />\n      <h1>Your Contacts</h1>\n      <Filter />\n      <ContactList\n        contacts={getFilteredContacts()}\n        handleEdit={handleEdit}\n        closeModal={closeModal}\n        handleDelete={handleDelete}\n        handleModalOpen={handleModalOpen}\n        isEditModalOpen={isEditModalOpen}\n        editId={editId}\n      />\n    </div>\n  );\n};\n\nexport default Contacts;"],"names":["ContactForm","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","phone","setPhone","dispatch","useDispatch","contacts","useSelector","state","ColorButton","styled","Button","_ref","color","theme","palette","getContrastText","purple","backgroundColor","boxShadow","_jsxs","className","css","onSubmit","e","preventDefault","_toConsumableArray","findIndex","contact","Notify","position","addContact","number","children","_jsx","TextField","type","pattern","title","required","placeholder","value","onChange","target","id","label","variant","size","selectContacts","selectFilters","filter","Filter","currentTarget","setFilter","EditContacts","handleEdit","editContact","editName","setEditName","editPhone","setEditPhone","useEffect","_ref2","Paper","elevation","defaultValue","ContactList","handleDelete","handleModalOpen","closeModal","isEditModalOpen","editId","map","onClick","find","Contacts","setIsEditModalOpen","setEditId","fetchContacts","style","display","flexDirection","justifyContent","alignItems","margin","borderRadius","paddingBottom","toLowerCase","includes","deleteContact"],"sourceRoot":""}